/*
 * File: app/view/MainViewViewController.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('byzCorp.view.MainViewViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainview',

    onStudentGridRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var data = record.data;
        refs.txtStudentId.setValue(data.STUDENTID);
        refs.txtStudentNo.setValue(data.STUDENTNO);
        refs.txtStudentFirstName.setValue(data.STUDENTFIRSTNAME);
        refs.txtStudentLastName.setValue(data.STUDENTLASTNAME);
        refs.txtStudentCountryId.setValue(data.STUDENTCOUNTRYID);
        refs.cmbStudentPeriod.setValue(data.STUDENTPERIODID);
        refs.cmbStudentClass.setValue(data.STUDENTCLASSID);
        refs.cmbStudentStatu.setValue(data.STUDENTSTATUSID);
        refs.cmbStudentDepartment.setValue(data.STUDENTDEPARTMENTID);
    },

    onStudentListPdfClick: function(item, e, eOpts) {
        var refs = this.getReferences();
        document.location = '/byzCorp/student/studentPDF?txtValue='+refs.txtSearch.getValue();
    },

    onSaveOrUpdateStudentClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        Ext.Ajax.request({
            url:'/byzCorp/student/saveOrUpdateStudent',
            params : {
                data : Ext.encode(refs.saveStudentForm.getForm().getValues())
            },
            success : function(res){debugger;
                var api = Ext.decode(res.responseText);
                if(api.success){
                    refs.studentsGrid.getStore().load();
                    refs.saveStudentForm.getForm().reset();
                }else{
                    Ext.Msg.alert('Uyarı', 'Kayıt işlemi gerçekleşmedi.');
                }
            }
        });
    },

    onStudentFormResetClick: function(button, e, eOpts) {
        var refs = this.getReferences();
        refs.saveStudentForm.getForm().reset();
    },

    onInternShipGridRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var data = record.data;
        refs.txtInternShipId.setValue(data.INTERNSHIPID);
        refs.cmbInternShipStudent.setValue(data.INTERNSHIPSTUDENTID);
        refs.dateStartInternShip.setRawValue(data.INTERNSHIPSTARTDATE);
        refs.dateEndInternShip.setRawValue(data.INTERNSHIPENDDATE);
        refs.cmbInternShipPeriod.setValue(data.INTERNSHIPPERIODID);
        refs.cmbInternShipStatu.setValue(data.INTERNSHIPSTATUSID);
        refs.cmbInternShipType.setValue(data.INTERNSHIPTYPEID);
    },

    onInternShipListPdfClick1: function(item, e, eOpts) {
        var refs = this.getReferences();
        document.location = '/byzCorp/internShip/internShipPDF?txtValue='+refs.txtSearch.getValue();
    },

    onSaveOrUpdateInternShipFormClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        Ext.Ajax.request({
            url:'/byzCorp/internShip/saveOrUpdateInternShip',
            params : {
                data : Ext.encode(refs.internShipForm.getForm().getValues())
            },
            success : function(res){debugger;
                var api = Ext.decode(res.responseText);
                if(api.success){
                    refs.internShipsGrid.getStore().load();
                    refs.saveInternShipForm.getForm().reset();
                    alert('000 - Kayıt İşlemi Başarılı.');
                }else{
                    Ext.Msg.alert('Uyarı', 'Kayıt işlemi gerçekleşmedi.');
                }
            }
        });
    },

    onFormInternShipFormResetClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        refs.internShipForm.getForm().reset();
    },

    onDeleteInternShipClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var record = refs.internShipsGrid.getSelectionModel();
        if(!record.hasSelection()){
            Ext.Msg.alert('Uyarı', 'Lütfen önce listeden öğrenci seçiniz..');
        }else{
            Ext.Ajax.request({
                url:'/byzCorp/internShip/deleteInternShip',
                params : {
                    internShipId : record.getSelected().items[0].data.INTERNSHIPID
                },
                success : function(res){debugger;
                    var api = Ext.decode(res.responseText);
                    if(api.success){
                        refs.internShipsGrid.getStore().load();
                        refs.saveInternShipForm.getForm().reset();
                    }else{
                        Ext.Msg.alert('Uyarı', 'Kayıt işlemi gerçekleşmedi.');
                    }
                }
            });
        }
    },

    onSaveOrUpdateUserClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        Ext.Ajax.request({
            url:'/byzCorp/user/saveOrUpdateUser',
            params : {
                data : Ext.encode(refs.kullaniciKayitForm.getForm().getValues())
            },
            success : function(res){debugger;
                var api = Ext.decode(res.responseText);
                if(api.success){
                    refs.usersGrid.getStore().load();
                    refs.kullaniciKayitForm.getForm().reset();
                }else{
                    Ext.Msg.alert('Uyarı', 'Kayıt işlemi gerçekleşmedi.');
                }
            }
        });
    },

    onUserFormResetClick: function(button, e, eOpts) {
        var refs = this.getReferences();
        refs.kullaniciKayitForm.getForm().reset();
    },

    onUserGridRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var data = record.data;
        refs.txtUserId.setValue(data.USERID);
        refs.txtUserFirstName.setValue(data.USERFIRSTNAME);
        refs.txtUserLastName.setValue(data.USERLASTNAME);
        refs.txtUserName.setValue(data.USERNAME);
        refs.txtUserEmail.setValue(data.USEREMAIL);
        refs.cmbUserTitle.setValue(data.USERTITLEID);
        refs.cmbUserRole.setValue(data.USERROLEID);
        refs.cmbUserStatus.setValue(data.USERSTATUS);
    },

    onUserPdfClick: function(item, e, eOpts) {
        var refs = this.getReferences();
        document.location = '/byzCorp/user/userPDF?txtValue='+refs.txtSearch.getValue();
    },

    onLookUpGridRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var lookUpDetailGrid = refs.lookUpDetailGrid;
        lookUpDetailGrid.setCollapsed(false);
        refs.lookUpDetailGrid.getStore().load({
            params:{
                lookUpId : record.data.LOOKUPID
            }
        });
    },

    onLookUpDetailGridRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var data = record.data;

        refs.txtLookUpDetailId.setValue(data.LOOKUPDETAILID);
        refs.txtLookUpDetailDesc.setValue(data.LOOKUPDETAILNAME);
        refs.txtLookUpDetailValue.setValue(data.LOOKUPDETAILVALUE);
        refs.cmbLookUpDetailStatus.setValue(data.LOOKUPDETAILSTATUS);
    },

    onSaveOrUpdateLookUpDetail: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var record = refs.lookUpGrid.getSelectionModel();
        if(!record.hasSelection()){
            Ext.Msg.alert('Uyarı', 'Lütfen önce lookUp Başlık seçiniz..');
        }else{
            Ext.Ajax.request({
                url:'/byzCorp/lookUp/saveOrUpdateLookUpDetail',
                params : {
                    data : Ext.encode(refs.saveOrUpdateLookUpDetailForm.getForm().getValues()),
                    lookUpId : record.getSelected().items[0].data.LOOKUPID
                },
                success : function(res){debugger;
                    var api = Ext.decode(res.responseText);
                    if(api.success){
                        refs.lookUpDetailGrid.getStore().load({
                            params:{
                                lookUpId : record.getSelected().items[0].data.LOOKUPID
                            }
                        });
                        refs.saveOrUpdateLookUpDetailForm.getForm().reset();
                    }else{
                        Ext.Msg.alert('Uyarı', 'Kayıt işlemi gerçekleşmedi.');
                    }
                }
            });
        }

    },

    onUserFormResetClick11: function(button, e, eOpts) {
        var refs = this.getReferences();
        refs.kullaniciKayitForm.getForm().reset();
    },

    onLogOutClick: function(button, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        Ext.Msg.show({
            title : 'Dikkat',
            msg : 'İşleminizi seçiniz ',
            width : 300,
            closable : false,
            buttons : Ext.Msg.YESNO,
            icon : Ext.Msg.QUESTION,
            buttonText :
            {
                yes : 'Uygulamadan çık',
                no : 'Ekranı kilitle',
                cancel : 'İptal'
            },
            multiline : false,
            fn : function(buttonValue, inputText, showConfig){debugger;
                if(buttonValue==='yes'){
                    var loginview = Ext.create('widget.loginview');
                    loginview.show();
                    refs.maincontainer.destroy();
                }else if(buttonValue==='no'){debugger;
                    var lockview = Ext.create('widget.lockview');
                    var lblGet = lockview.getReferences().lblUserLockInfo;
                    var lblNewValue = lblUserInfo.getvalue();
                    lblGet.setText(lblNewValue);
                    lockview.show();
                    refs.maincontainer.destroy();
                }else{
                    Ext.Msg.alert('Uyarı', 'İşleminiz iptal edildi.');
                }

            }
        });
    },

    onTxtSearchKeyup: function(textfield, e, eOpts) {
        debugger;
        var refs = this.getReferences();
        var txtValue = textfield.value;
        refs.usersGrid.getStore().load({
            params:{
                txtValue : txtValue
            }
        });
        refs.lookUpGrid.getStore().load({
            params:{
                txtValue : txtValue
            }
        });
        refs.studentsGrid.getStore().load({
            params:{
                txtValue : txtValue
            }
        });
        refs.internShipsGrid.getStore().load({
            params:{
                txtValue : txtValue
            }
        });
    }

});
